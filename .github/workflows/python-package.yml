# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: PyPI Deployment
        # You may pin to the exact commit or the version.
        # uses: casperdcl/deploy-pypi@928e3123266d588b46c017228f9a9d4c13ad4c93
      uses: casperdcl/deploy-pypi@v2.5.0
      with:
        # PyPI username
        user: __token__
        # PyPI password or API token
        password: ${{ secrets.PYPI_TOKEN }}
        # Packages to `pip install` before building
        build: true
        # Whether to run basic checks on the built files
        check: true
        # Whether to upload
        upload: true
        # Directory containing distributions
        dist_dir: dist
        # Continue uploading files if one already exists
        skip_existing: true
          
